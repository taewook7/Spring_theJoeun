\\192.168.0.12

[스프링의 디렉토리 구조]
src/main/java - 자바 코드(Controller, Model, Service)

src/main/resources - 자바 코드에서 참조하는 리소스 파일들
	sqlMapConfig.xml, mabatis의 mapper
	
src/test/java - 테스트 관련 코드

src/test/resources - 테스트 코드에서 참조하는 리소스 파일들

src/main/webapp - 웹 서비스 루트 디렉토리(외부에서 접근 가능)

src/main/webapp/resources - js, css, image 등의 웹 리소스 파일

src/main/webapp/WEB-INF/classes - 컴파일된 클래스

src/main/webapp/WEB-INF/spring - 스프링의 환경설정 파일
  src/main/webapp/WEB-INF/spring/root-context.xml - 서블릿과 관련되지 않은 모든 리소스에 대한 설정
  src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml - 서블릿과 리소스에 대한 설정
  
src/main/webapp/WEB-INF/views - html, jsp 페이지

src/main/webapp/WEB-INF/ - 외부에서 접근 불가능(보안을 위해서)
  컨트롤러를 경유해서 접근 가능

  
pom.xml - 메이븐에서 참조하는 설정 파일

[스프링의 주요 특징]
- POJO(Plain Old Java Object) 기반의 구성
  별도의 API 가 필요하지 않은 일반적인 자바 코드를 이용하여 개발 가능.
- 의존성 주입(DI)를 통한 객체 간의 관계 구성
- AOP(Aspect Oriented Programming) 지원
  반복적인 코드를 줄이고 개발자가 비즈니스 로직에만 집중할 수 있도록 지원한다.
- 편리한 MVC 구조
- WAS에 종속적이지 않은 개발환경

1) IoC(Inversion of Control, 제어의 역전) - 객체에 대한 제어권
- 기존에는 개발자에게 제어권이 있었다(new 연산자).
- 객체의 제어권을 스프링에게 넘김
- 인스턴스의 라이프 사이클(생성부터 소멸까지)을 개발자가 아닌 스프링 프레임웍이 담당한다.

2) DI(Dependency Injection, 의존관계 주입)
- 객체 간의 의존성을 개발자가 설정하는 것이 아닌 스프링 컨테이너가 주입시켜 주는 기능
- 객체를 쉽게 확장하고 재사용할 수 있다.

가) 의존 관계
B의 코드가 변경되면 A의 코드도 변경되는 경우
A와 B는 의존관계가 있다.
A는 B에 의존한다.

A 코드 변경 발생  		B 유연한 확장이 어려움

강한 결합과 느슨한 결합
B의 코드 변경이 A에 영향을 미치지 않도록 느슨하게 설계

A 코드 변경 불필요  	B 유연한 확장이 가능함
						  핵심 기능의 변경이 쉬워짐
						  
강한 결합은 (결합도가 높으면) 유지보수를 어렵게 한다.
	한 곳의 수정 -> 나비효과

나) 강한 결합과 느슨한 결합

public class Member {
	String userid;
	String passwd;
	String name;
	
	//생성자를 public에서 private으로 바꾸는 경우
	//private이기 때문에 바깥에서는 호출을 하지 못한다.
	private Member() {
	}
}

//생성자가 private으로 바뀌면 MemberUse클래스도 수정해야 한다.
class MemberUse {
	public MemberUse() {
		Member m = new Member();
	}
}
//생성자가 private으로 바뀌어도 영향을 받지 않는다.
class MemberUse {
	public MemberUse(Member m) {

	}
}


[메이블 빌드 에러 발생시 해결 방법]
1. Java Build Path에서 jdk 버전을 1.8로 조정
2. Project Facets에서 jdk 버전을 1.8로 조정
3. 프로젝트 > Properties > Deployment Assembly > Add > Java Build Path Entries > Maven Dependencies 선택
4. pom.xml에서 spring version 조정
5. 프로젝트 clean, server clean, Clean Tomcat Work Directory
6. 프로젝트 선택 후 우클릭 -> Maven -> Update Project
   메뉴에서 Force Update of Snapshots/Releases(강제 업데이트)
7. STS를 종료한 후 메이븐 저장소(.m2) 삭제 후 STS 재시작

<회원 데이터 관련 클래스>
-Member
-IdPasswordNotMatchingException
-MemberDao

<회원 가입 처리 클래스>
-AlreadyExisitingMemberException
-RegisterRequest
-MemberRegisterService

<암호 변경 관련 클래스>
-MemberNotFoundException
-ChangePasswordService

[스프링을 이용한 객체 조립과 사용]
스프링을 사용하려면 먼저 스프링이 어떤 객체를 생성하고, 의존을 어떻게 주입할 지를 정의하는 설정 정보를 작성해 주어야 한다.
이 설정 정보는 XML 파일을 이용해서 작성할 수 있다.

<!-- 
<bean>태그는 MemberDao타입의 빈 객체를 생성해서
"memberDao"라는 이름으로 보관한다는 의미를 갖는다.

spring.MemberDao memberDao = new spring.MemberDao();
-->
<bean id="memberDao" class="spring.MemberDao">
</bean>

<!-- 
<constructor-arg>태그는 생성자를 이용해서
의존 객체를 주입할 때 사용한다. 
이름이 memberDao인 다른 빈 객체를 생성자에게 전달한다.
spring.MemberRegisterService memberRegSvc =
	new spring.MemberRegisterService(memberDao);
-->
	<bean id="memberRegSvc" class="com.edu.di01.spring.MemberRegisterService">
		<constructor-arg ref="memberDao"></constructor-arg>
	</bean>

객체를 생성하고 의존 객체를 주입하는 것은
스프링컨테이너이므로 설정 파일을 이용해서 컨테이너를 생성해야 한다.
GenericXmlApplicationContext 클래스를 이용하여 스프링 컨테이너를 생성할 수 있다.

ApplicationContext ctx =
	new GenericXmlApplicationContext("classpath:appCtx.xml");

컨테이너를 생성했으므로 getBean() 메서드를 이용해서 사용할 객체를 구할 수 있다.

[DI 방식 1 : 생성자 방식]
생성자의 파라미터가 2개 이상일 경우는 순서에 맞게
<constructor-arg>태그를 사용하면 된다.

[DI 방식 2 : 설정 메서드 방식]
- 메서드 이름이 set으로 시작한다.
- set뒤에는 프로퍼티 이름의 첫 글자를  대문자로 치환한 이름을 사용한다.
- 한 개의 파라미터를 가지며, 
  파라미터의 타입은 프로퍼티의 타입이다.
  
[자바빈즈 프로퍼티]
여기서 말하는 Property란 JavaBeans규약에 정의된 프로퍼티를 뜻한다.
자바빈즈 규약은 재사용 가능한 객체를 Bean으로 명명하고 있고 있으며, 이 Bean은 프로퍼티와 이벤트, 기타 기능(메서드)으로 구성된다.

프로퍼티는 빈이 관리하는 데이터로서,
이 프로퍼티를 위한 명명 규칙은 아래와 같이 정의한다.
- 프로퍼티 값을 구하는 메서드는 get으로 시작한다.
- 프로퍼티 값을 변경하는 메서드는 set으로 시작한다.
- get, set뒤에는 프로퍼티의 이름의 첫 글자를 대문자로 바꾼 이름을 사용한다.
- set메서드는 1개의 파라미터를 갖는다.

객체 타입이 아닌 값 타입을 설정하는 경우에는
ref속성 대신에 value속성을 사용해서 설정할 수 있다.

[2개 이상의 설정 파일을 사용]
1. 2개 이상의 XML파일을 사용할 때는 
	배열을 이용해서 설정 파일 목록을 전달해주면 된다.

2. <import> 태그를 사용
<import>태그는 하나의 XML 설정에서 다른 XML 설정을 함께 사용한다는 것을 지정할 때 사용한다.

















